generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(uuid()) @map("_id")
  name          String        @unique
  email         String        @unique
  image         String
  emailVerified DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  followersAmount Int @default(0)
  followingAmount Int @default(0)
  posts         Post[]
  accounts      Account[]
  comments      PostComment[]
  sessions      Session[]
  likedPosts    LikedPost[]
  followers Follows[] @relation("following")
  following Follows[] @relation("follower")
}

model Follows {
  id String @id @default(uuid()) @map("_id")
  follower    User @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User @relation("following", fields: [followingId], references: [id])
  followingId String
}

model Post {
  id           String        @id @default(uuid()) @map("_id")
  title        String
  videoUrl     String
  thumbnailUrl String
  likes        Int           @default(0)
  commentsAmount Int? @default(0)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  likedBy      LikedPost[]
  postComments PostComment[]
}

model LikedPost {
  id     String @id @default(uuid()) @map("_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String @unique
}

model PostComment {
  id      String @id @default(uuid()) @map("_id")
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String @unique
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  String @unique
  message String
  createdAt DateTime @default(now())
}

model VerificationToken {
  id         String   @id @default(uuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
