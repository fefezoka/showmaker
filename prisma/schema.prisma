generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(uuid()) @map("_id")
  name          String      @unique
  email         String      @unique
  image         String
  emailVerified DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
  likedPosts    LikedPost[]
}

model Post {
  id           String      @id @default(uuid()) @map("_id")
  title        String
  videoUrl     String
  thumbnailUrl String
  likes        Int         @default(0)
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  likedBy      LikedPost[]
}

model LikedPost {
  id     String @id @default(uuid()) @map("_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String @unique
}

model VerificationToken {
  id         String   @id @default(uuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
